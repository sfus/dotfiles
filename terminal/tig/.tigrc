# # My Qiita post about this settings (in Japanese)
# https://qiita.com/sfus/items/063797a1dd8fdc7d032f
#
# http://jonas.nitro.dk/tig/manual.html
# http://jonas.nitro.dk/tig/tigrc.5.html
# https://github.com/jonas/tig/blob/master/tigrc
# http://qiita.com/yoshikazusawa/items/d99e8b5d6f6a45aa6e2e

# # デフォルト設定 (https://github.com/jonas/tig/blob/master/tigrc)
# set blame-view  = date:default author:full file-name:auto id:yes,color line-number:no,interval=5 text
# set grep-view   = file-name:no line-number:yes,interval=1 text
# set main-view   = line-number:no,interval=5 id:no date:default author:full commit-title:yes,graph,refs,overflow=no
# set refs-view   = line-number:no id:no date:default author:full ref commit-title
# set stash-view  = line-number:no,interval=5 id:no date:default author:full commit-title
# set status-view = line-number:no,interval=5 status:short file-name
# set tree-view   = line-number:no,interval=5 mode author:full file-size date:default id:no file-name

# main view の左端にコミットIDを表示する
set main-view = id date author:email-user commit-title:graph=yes,refs=yes

# blame view の行数表示をON、intervalを1に
set blame-view  = date:default author:email-user id:yes,color line-number:yes,interval=1 text

# Pager系の行数表示をON、intervalを1に (default: line-number:no,interval=5)
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no

# # 行数表示をON
#set blob-view-line-number = yes
#set blame-view-line-number = yes

# # 画面を垂直方向に分割する
# set vertical-split = yes
#
# 横分割に強制する
set vertical-split = no
#
# # デフォルト値
# set vertical-split = auto

# # utf-8 文字で画面描画する (~でトグル)
set line-graphics = utf-8
#set line-graphics = ascii

# タブサイズ
set tab-size = 4

# # 空白無視
# set ignore-space = all

# 空白無視 (status-view では表示するが diff-view では無視する) (W でトグル)
set ignore-space = at-eol

# 検索時に大文字小文字を無視する (default: false)
set ignore-case = true

# 水平分割したウィンドウの下画面サイズを % で指定（行数指定も可）
set split-view-height = 80%

# マージ diff を表示する
set diff-options = -m --first-parent

# マウスを有効にする
set mouse = true

# '+行数' の形で Editor に行番号を引数として渡すか
set editor-line-number = yes

# リフレッシュするタイミング
set refresh-mode = auto
#set refresh-mode = after-command
#set refresh-mode = periodic
#set refresh-interval = 1

# 差分表示に diff-highlight を使う (要 tig 2.2.1 以降. diff-highlight が $PATH にあること)
set diff-highlight = true

# カラー設定
# diff-view で境界が見やすくなるように変更
#color default           white   black
color  diff-header       default magenta
#color diff-index        default blue
color  diff-chunk        black   white
#color "Reported-by:"    default green
#color tree.date         black   cyan    bold

## コマンド設定

# 表示トグル系コマンドを一律 Alt+Shift 付きに変更 (sort-field はデフォルトのまま)
bind main    <Esc>G :toggle commit-title-graph      # Toggle revision graph visualization
bind main    <Esc>F :toggle commit-title-refs       # Toggle reference display (tags/branches)

bind generic <Esc>I :toggle sort-order              # Toggle ascending/descending sort order
# bind generic    i :toggle sort-field              # Toggle field to sort by
bind generic <Esc><Hash> :toggle line-number        # Toggle line numbers
bind generic <Esc>D :toggle date                    # Toggle date display
bind generic <Esc>A :toggle author                  # Toggle author display
bind generic <Esc>~ :toggle line-graphics           # Toggle (line) graphics mode
bind generic <Esc>F :toggle file-name               # Toggle file name display
# bind generic  ??? :toogle show-changes            # Toggle local changes display in the main view
bind generic <Esc>W :toggle ignore-space            # Toggle ignoring whitespace in diffs
# bind generic  ??? :toggle commit-order            # Toggle commit ordering
bind generic <Esc>X :toggle id                      # Toggle commit ID display
bind generic <Esc>$ :toggle commit-title-overflow   # Toggle highlighting of commit title overflow
# bind generic  ??? :toggle file-size               # Toggle file size format
# bind generic  ??? :toggle status                  # Toggle status display
# bind generic  ??? :toggle status-untracked-dirs   # Toggle display of file in untracked directories
# bind generic  ??? :toggle vertical-split          # Toggle vertical split
bind generic <Esc>% :toggle file-filter

# g をファイル先頭に移動に変更、 view-grep を再割当て
bind generic g      move-first-line
bind generic E      view-grep # (default: g)

# G でファイル末尾に移動 (default: :toggle commit-title-graph)
bind generic G      move-last-line
bind main    G      move-last-line

# n / p を上下移動に割り当て (default: find-next / view-pager)
bind generic n      move-down
bind generic p      move-up

# n / p で単位ごとの移動
bind diff    n      :/^@@
bind diff    p      :?^@@
bind diff    <Esc>n :/^diff --(git|cc)
bind diff    <Esc>p :?^diff --(git|cc)
bind stage   n      :/^@@
bind stage   p      :?^@@
bind stage   <Esc>n :/^diff --(git|cc)
bind stage   <Esc>p :?^diff --(git|cc)
bind pager   n      :/^@@
bind pager   p      :?^@@
bind pager   <Esc>n :/^diff --(git|cc)
bind pager   <Esc>p :?^diff --(git|cc)
bind log     n      :/^commit
bind log     p      :?^commit

# 元の n / p を別に割り当て
bind generic V      view-pager
bind generic <Ctrl-s> find-next # 要 stty stop undef
bind generic <Ctrl-r> find-prev

# Ctrl-v, Alt-v でページ単位移動 (ターミナルに食われるので Ctrl-v は2度押しが必要)
bind generic <Ctrl-v> move-page-down
bind generic <Esc>v move-page-up

# Ctrl-f, Ctrl-b で左右スクロール
bind generic <Ctrl-f> scroll-right
bind generic <Ctrl-b> scroll-left

# Ctrl-g でリフレッシュ
bind generic <Ctrl-g> refresh

# h で close できるように (default: view-help)
bind generic h      :view-close
bind generic <Esc>h :view-help

# tree view で l/h で操作できるように
bind tree    l      :enter
bind tree    h      :?\.\.
bind blob    l      :view-close
#bind blob    h      :view-close

# F で fetch (default: :toggle file-name / :toggle commit-title-refs)
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)

# U で pull
bind generic U      ?git pull %(remote)

# Alt-u で該当ブランチを更新
bind main    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"
bind diff    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"
bind refs    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"

# # Alt-Shift-u で --set-upstream-to (-u) を変更
# bind main    <Esc>U ?git branch -u "%(prompt Enter remote name: )"/%(branch) %(branch)
# bind refs    <Esc>U ?git branch -u "%(prompt Enter remote name: )"/%(branch) %(branch)

# Alt-Shift-u で submodule update
bind generic <Esc>U ?git submodule update --init --recursive

# P で remote への push -u
#bind generic P      ?sh -c "git push -u %(remote) `git rev-parse --abbrev-ref HEAD`"
bind generic P      ?git push -u %(remote) %(repo:head)
bind refs    P      ?git push -u %(remote) %(branch)

# Alt-Shift-p で指定した remote への push -u
bind generic <Esc>P ?git push -u "%(prompt Enter remote name: )" %(repo:head)
bind refs    <Esc>P ?git push -u "%(prompt Enter remote name: )" %(branch)

# C で commit (refs での C は checkout, main での C は cherry-pick だが上書きする)
bind generic C      !git commit
bind refs    C      !git commit
bind main    C      !git commit

# Alt-c で commit --allow-empty
bind generic <Esc>c !git commit --allow-empty

# + で commit --amend
bind generic +      !git commit --amend --allow-empty

# L で reflog
#bind generic L      :!git reflog
bind generic L      !sh -c "git reflog --pretty=raw | tig --pretty=raw"

# Alt-l でファイル単体のコミットツリーを tig で開き直す
bind generic <Esc>l !sh -c "tig %(file)"

# _ で指定 reflog 番号にリセット (--hard)
bind generic _      ?git reset --hard HEAD@{"%(prompt Enter HEAD@{} number: )"}

# Alt-_ で指定 reflog 番号にリセット (--soft)
bind generic <Esc>_ ?git reset --soft HEAD@{"%(prompt Enter HEAD@{} number: )"}

# ^ で reset --soft
bind generic ^      ?git reset --soft HEAD^

# Alt-^ で指定 commit まで reset --soft
bind main    <Esc>^ ?git reset --soft %(commit)
bind diff    <Esc>^ ?git reset --soft %(commit)

# . で HEAD との diff
bind main    .      !sh -c "git diff %(commit) | tig"
bind diff    .      !sh -c "git diff %(commit) | tig"
bind refs    .      !sh -c "git diff %(branch) | tig"

# Alt-. で指定 commit ID との diff
bind main    <Esc>. ?sh -c "git diff %(commit)..%(prompt Enter commit ID: ) | tig"
bind diff    <Esc>. ?sh -c "git diff %(commit)..%(prompt Enter commit ID: ) | tig"
bind refs    <Esc>. ?sh -c "git diff %(branch)..%(prompt Enter branch name: ) | tig"

# N で HEAD との diff --name-only (default: find-prev)
bind main    N      !sh -c "git diff --name-only %(commit) | tig"
bind diff    N      !sh -c "git diff --name-only %(commit) | tig"
bind refs    N      !sh -c "git diff --name-only %(branch) | tig"

# ~ で親コミットに移動 (default: :toggle line-graphics)
bind generic ~      :goto %(commit)^

# S で stash save
bind generic S      ?git stash save "%(prompt Enter stash comment: )"

# Y で stash pop
bind diff    Y      ?git stash pop %(stash)
bind stash   Y      ?git stash pop %(stash)

# Alt-y で stash apply
bind diff    <Esc>y ?git stash apply %(stash)
bind stash   <Esc>y ?git stash apply %(stash)

# H で reset --hard
bind main    H      ?git reset --hard %(commit)
bind diff    H      ?git reset --hard %(commit)
bind refs    H      ?git reset --hard %(commit)

# H で reset --hard HEAD (status-view)
bind status  H      ?git reset --hard HEAD

# D でブランチを強制削除 (main-view, refs-view)
bind main    D      ?git branch -D %(branch)
bind refs    D      ?git branch -D %(branch) # (default: !)

# D でトラッキングされていないファイルを削除 (status-view)
bind status  D      ?git clean -d -f -- %(file)

# D で stash を削除 (`!` と同じ) (stash-view)
bind stash   D      ?git stash drop %(stash)

# D でファイルを削除 (tree-view)
bind tree    D      ?git rm %(file)

# Alt-d でリモートブランチを削除 (main-view, refs-view)
bind main    <Esc>d ?git push --delete %(remote) %(branch)
bind refs    <Esc>d ?git push --delete %(remote) %(branch)

# x でトラッキングされていないファイルをすべて削除
bind main    x      ?git clean -d -f
bind status  x      ?git clean -d -f

# x でマージ済みローカルブランチをすべて削除 (master/develop 除く)
bind refs    x      ?sh -c "git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %"

# X で stage されていないファイルをすべて元に戻す (`!' : status-revert の全体版)
bind status  X      ?git checkout -- .

# ` で commit ID をクリップボードにコピー (Mac用)
bind generic `      @bash -c "echo -n '%(commit)' | pbcopy"

# ` でファイルパスをクリップボードにコピー (Mac用)
bind stage   `      @bash -c "echo -n '%(file)' | pbcopy"
bind status  `      @bash -c "echo -n '%(file)' | pbcopy"
bind tree    `      @bash -c "echo -n '%(file)' | pbcopy"
bind blob    `      @bash -c "echo -n '%(file)' | pbcopy"

# ` でブランチ名をクリップボードにコピー (Mac用)
bind refs    `      @bash -c "echo -n '%(branch)' | pbcopy"

# # Alt-` で merge-base コミットIDをクリップボードにコピー (Mac用)
# bind main    <Esc>` @bash -c "echo -n `git merge-base '%(commit)' %(prompt Enter branch name: )` | pbcopy"
# bind refs    <Esc>` @bash -c "echo -n `git merge-base '%(branch)' %(prompt Enter branch name: )` | pbcopy"

# Alt-` でコミットメッセージをクリップボードにコピー (Mac用)
bind main    <Esc>` @bash -c "git log -1 --pretty=%B '%(commit)' | pbcopy"

# ! で revert
bind main    !      ?git revert %(commit)

# Alt-! で revert -m 1 (マージコミットを revert)
bind main    <Esc>! ?git revert -m 1 %(commit)

# K で cherry-pick (default: 'C')
bind main    K      ?git cherry-pick %(commit)
bind diff    K      ?git cherry-pick %(commit)
bind refs    K      ?git cherry-pick %(commit)

# Alt-k で cherry-pick -n (--no-commit)
bind main    <Esc>k ?git cherry-pick -n %(commit)
bind diff    <Esc>k ?git cherry-pick -n %(commit)

# T で tag
bind main    T      ?git tag "%(prompt Enter tag name: )" %(commit)
bind refs    T      ?git tag "%(prompt Enter tag name: )" %(branch)

# Alt-t で tag 削除
bind refs    <Esc>t ?git tag -d %(tag)

# Alt-Shift-t で push tag
bind refs    <Esc>T ?git push %(remote) %(tag)

# = で checkout
bind main    =      ?git checkout %(branch)
bind refs    =      ?git checkout %(branch)

# Alt-= で現在行のコミットIDを checkout
bind main    <Esc>= ?git checkout %(commit)
bind refs    <Esc>= ?git checkout %(commit)

# - で直前のブランチに戻る (checkout -)
bind generic -      ?git checkout -

# B でブランチを作成
bind main    B      ?git branch "%(prompt Enter branch name: )" %(commit)
bind refs    B      ?git branch "%(prompt Enter branch name: )" %(branch)

# Alt-b でブランチを作成してそのブランチに移動 (checkout -b)
bind main    <Esc>b ?git checkout -b "%(prompt Enter branch name: )" %(commit)
bind refs    <Esc>b ?git checkout -b "%(prompt Enter branch name: )" %(branch)

# Alt-Shift-b でブランチ名を変更
bind main    <Esc>B ?git branch -m %(branch) "%(prompt Enter new branch name: )"
bind refs    <Esc>B ?git branch -m %(branch) "%(prompt Enter new branch name: )"

# M で merge
bind main    M      ?git merge %(branch)
bind diff    M      ?git merge %(branch)
bind refs    M      ?git merge %(branch)

# Alt-m で merge --no-ff (必ずマージコミットを作る)
bind main    <Esc>m ?git merge --no-ff %(branch)
bind diff    <Esc>m ?git merge --no-ff %(branch)
bind refs    <Esc>m ?git merge --no-ff %(branch)

# R で rebase
bind main    R      ?git rebase --allow-empty %(branch)
bind diff    R      ?git rebase --allow-empty %(branch)
bind refs    R      ?git rebase --allow-empty %(branch)
bind main    <Esc>r ?git rebase --allow-empty %(commit)
bind diff    <Esc>r ?git rebase --allow-empty %(commit)

# Alt-Shift-r で pull --rebase
bind generic <Esc>R ?git pull --rebase %(remote)

# I で rebase -i
bind main    I      ?git rebase -i --allow-empty %(branch)
bind diff    I      ?git rebase -i --allow-empty %(branch)
bind refs    I      ?git rebase -i --allow-empty %(branch)
bind main    <Esc>i ?git rebase -i --allow-empty %(commit)
bind diff    <Esc>i ?git rebase -i --allow-empty %(commit)

## その他

# > で git rebase --continue
bind generic >      ?git rebase --continue

# Alt-> で git cherry-pick --continue
bind generic <Esc>> ?git cherry-pick --continue

# Z で git rebase --abort
bind generic Z      ?git rebase --abort

# Alt-z で git cherry-pick --abort
bind generic <Esc>z ?git cherry-pick --abort

# Alt-Z で git merge --abort
bind generic <Esc>Z ?git merge --abort

# O で rebase --onto (default: maximize)
# %(prompt) で指定した派生元ブランチ or コミットIDからカレントブランチの HEAD までを、現在行のブランチに乗せる
bind main    O      ?git rebase --onto %(commit) "%(prompt Enter beginning of branch/commit: )" %(repo:head)
bind refs    O      ?git rebase --onto %(commit) "%(prompt Enter beginning of branch/commit: )" %(repo:head)
# 以下の様なケースで topic がカレントブランチである場合、{master} にカーソルを置いて `O' を実行して "next" を入力する
## https://git-scm.com/docs/git-rebase
#     o---o---o---o---o  {master}
#          \
#           o---o---o---o---o  next
#                            \
#                             o---o---o  topic
#
## $ git rebase --onto master next topic
#     o---o---o---o---o  {master}
#         |            \
#         |             o'--o'--o'  topic
#          \
#           o---o---o---o---o  next

# '#' で .gitignore に追加 (default: :toggle line-number)
bind status  <Hash> ?sh -c "echo %(file) >> .gitignore"
bind tree    <Hash> ?sh -c "echo %(file) >> .gitignore"

# '&' で git mergetool
bind generic &      !git mergetool --prompt
bind stage   &      !git mergetool --prompt %(file)
bind status  &      !git mergetool --prompt %(file)

# '*' で git format-patch
bind generic *      ?git format-patch -"%(prompt Enter the number to create patches: )" %(commit)

# Alt-* で git am
bind generic <Esc>* ?sh -c "git am *.patch"


## Hub

# ; で GitHub の該当コミットを開く ※要 hub インストール
# http://blog.kyanny.me/entry/2012/07/22/033134
bind generic ;      @hub browse -- commit/%(commit)

# Alt-; で GitHub の該当ページを開く
bind tree    <Esc>; @hub browse -- blob/%(commit)/%(file)

# Alt-; で GitHub の該当行を開く ('#' を出すために `echo Iwo= | base64 --decode` している)
bind diff    <Esc>; @sh -c "hub browse -- blob/%(commit)/%(file)`echo Iwo= | base64 --decode`L%(lineno)"
bind blame   <Esc>; @sh -c "hub browse -- blob/%(commit)/%(file)`echo Iwo= | base64 --decode`L%(lineno)"
bind blob    <Esc>; @sh -c "hub browse -- blob/%(commit)/%(file)`echo Iwo= | base64 --decode`L%(lineno)"
bind grep    <Esc>; @sh -c "hub browse -- blob/%(commit)/%(file)`echo Iwo= | base64 --decode`L%(lineno)"

# bind tree    <Esc>; @hub browse -- blob/"%(prompt Enter branch name: )"/%(file)
# bind blob    <Esc>; @hub browse -- blob/"%(prompt Enter branch name: )"/%(file)
# bind grep    <Esc>; @hub browse -- blob/"%(prompt Enter branch name: )"/%(file)

# w で GitHub の該当ブランチの Pull Request 作成ページを開く ※要 hub インストール
bind main    w      @hub browse -- compare/%(branch)?expand=1
bind diff    w      @hub browse -- compare/%(branch)?expand=1
bind refs    w      @hub browse -- compare/%(branch)?expand=1

# W で GitHub の該当ブランチの Pull Request 作成ページを開く ※要 hub インストール
bind main    W      @hub browse -- compare/develop...%(remote):%(branch)?expand=1
bind diff    W      @hub browse -- compare/develop...%(remote):%(branch)?expand=1
bind refs    W      @hub browse -- compare/develop...%(remote):%(branch)?expand=1

# A で GitHub の現在行コミットからHEADまでの差分ページを開く (default: :toggle-author) ※要 hub インストール
bind main    A      @sh -c "hub compare %(commit)...`git rev-parse HEAD`"
bind diff    A      @sh -c "hub compare %(commit)...`git rev-parse HEAD`"
bind refs    A      @sh -c "hub compare %(commit)...`git rev-parse HEAD`"

# Alt-a で GitHub の現在行コミットから指定コミットまでの差分ページを開く ※要 hub インストール
bind main    <Esc>a @hub compare %(commit)..."%(prompt Enter commit ID: )"
bind diff    <Esc>a @hub compare %(commit)..."%(prompt Enter commit ID: )"
bind refs    <Esc>a @hub compare %(commit)..."%(prompt Enter commit ID: )"

## GitHub Enterprise の場合、.gitconfig に以下の様な設定を追加してカスタマイズする
# [hub]
#     protocol = http
#     host = git.example.com
