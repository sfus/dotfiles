# http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1
# 達人に学ぶ.tmux.confの基本設定 - Qiita http://qiita.com/succi0303/items/cb396704493476373edf
# (*) 付きは達人.tmux.confと同じところ

# KeyBindings
# "bind -r" は 再度 Prefix を押さずに入力 （連打）できる.
# "bind -n" は Prefix が不要になる.
# "bind -t" は key を key-table 内に割り当てられる.

# デフォルトシェルを zsh に変更
set -g default-shell /bin/zsh
set -g default-command /bin/zsh

# prefixキーを C-q に変更する
set -g prefix C-q

# C-b のキーバインドを解除する (*)
unbind C-b

# キーストロークのディレイを減らす (*)
set -sg escape-time 1

# # ウィンドウのインデックスを1から始める (*)
# set -g base-index 1

# # ペインのインデックスを1から始める (*)
# setw -g pane-base-index 1

# bind -r でのリピート可能時間 (default: 500)
set -g repeat-time 1000

# C-q r で設定ファイルをリロードする (*)
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# C-q C-q でtmux内のプログラムに C-q を送る
bind C-q send-prefix

# C-q q でtmux内のプログラムに C-q C-q を送る. (defaut: display-panes)
bind q send-keys C-q C-q

# C-q C-j でtmux内のプログラムに C-q C-j (Emacs での LF コード入力) を送る. (default: C-q C-q C-j)
bind C-j send-keys C-q C-j
# # (C-j を IME On/Off にしているので C-q -C-j ではなく C-q j に)
# bind j send-keys C-q C-j

# C-q C-m でtmux内のプログラムに C-q C-m (Emacs での CRLF コード入力) を送る. (default: C-q C-q C-m)
bind C-m send-keys C-q C-m

# C-q C-i でtmux内のプログラムに C-q C-i (Emacs での TAB コード入力) を送る. (default: C-q C-q C-i)
bind C-i send-keys C-q C-i

## ペイン分割 (for tmux 1.8 or lower)

# C-q | でペインを縦に分割する (default: Prefix %)
bind | split-window -h
# C-q \ でペインを縦に分割する (33%)
bind '\' split-window -h -p 33
# '
# C-q - でペインを横に分割する (default: Prefix ")
bind - split-window -v
# C-q _ でペインを横に分割する (20%)
bind _ split-window -v -p 20

## ペイン分割 (for tmux 1.9 or higher)
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 1.9" | bc) -eq 1 ]' \
   'bind c new-window -c "#{pane_current_path}"; \
    bind | split-window -h -c "#{pane_current_path}"; \
    bind "\\" split-window -h -p 33 -c "#{pane_current_path}"; \
    bind - split-window -v -c "#{pane_current_path}"; \
    bind _ split-window -v -p 20 -c "#{pane_current_path}"'

# # Vimのキーバインドでペインを移動する
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# Emacsのキーバインドでペインを移動する (連打可) (*)
bind -r C-b select-pane -L
bind -r C-n select-pane -D
bind -r C-p select-pane -U
bind -r C-f select-pane -R

# C-q C-h/C-l でウィンドウ移動
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# これ以外に iTerm2 の設定で Ctrl+Cmd+. に 0x11 0x6e (C-q n)、Ctrl+Cmd+, に 0x11 0x70 (C-q p) を
# 割り当ててウィンドウ移動できるようにしている.(iTerm のタブ移動は Shift+Cmd+[ や Sfhit+Cmd+] で代用)
# (Preferences -> Keys -> Key Mappings, Action に 'Send Hex Code' を選択)

# 同様に、Ctrl+Tab に 0x11 0x6e (C-q n), Shift+Ctrl+Tab に 0x11 0x70 (C-q p)、
# Ctrl+Cmd+Tab に 0x11 0x29 (`C-q )`), Shift+Ctrl+Cmd+Tab に 0x11 0x28 (`C-q (`) を割り当て

# tmux 2.1 以降で上記 Hex 入力を可能にするための設定
# https://github.com/tmux/tmux/issues/159
# http://dackdive.hateblo.jp/entry/2015/10/31/091204
# (指定ミリ秒以内で入力されたものは文字のペーストとみなし、key binding は実行されないという設定 default: 1)
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
    'set -g assume-paste-time 0'

# # Prefix なしの M-[, M-] でペイン移動
# bind -n M-[ select-pane -t :.-
# bind -n M-] select-pane -t :.+

# # Prefix なしの M-o / M-O でペイン移動 (default: Prefix o)
# bind -n M-o select-pane -t :.+
# bind -n M-O select-pane -t :.-

# Prefix なしの M-o / C-M-o でペイン移動 (default: Prefix o)
bind -n M-o   select-pane -t :.+
# bind -n C-M-o select-pane -t :.-

# # Prefix なしの M-O でペインローテーション (default: Prefix C-o)
# bind -n M-O rotate-window

# C-q C-o/M-o でのローテーションを連打できるように
bind -r C-o rotate-window
bind -r M-o rotate-window -D

# Vimのキーバインドでペインをリサイズする (連打可)  (*)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# C-q C-w で 新規 session 開始 (session 移動: `C-q (`, `C-q )`
bind C-w new-session

# window/session 確認: `C-q w` or `C-q s`
#
# Enter   Choose selected item
# Up      Select previous item
# Down    Select next item
# x       Kill selected item
# X       Kill tagged items
# <       Scroll list of previews left
# >       Scroll list of previews right
# C-s     Search by name
# n       Repeat last search
# t       Toggle if item is tagged
# T       Tag no items
# C-t     Tag all items
# :       Run a command for each tagged item
# f       Enter a format to filter items
# O       Change sort order
# v       Toggle preview
# q       Exit mode

# ver.2.8 未満では上記 choose-tree で  x や X が効かないので Prefix + C-k に kill-session を割り当て
bind C-k choose-tree -Zs "kill-session -t %%"

# window を join する
bind > join-pane -t :+ # 今のペインを右の window に join
bind < join-pane -t :- # 今のペインを左の window に join

# C-q e/E で同時入力切替 On/Off
set-option -g synchronize-panes off
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# その他
# Prefix なし C-t で、カレントディレクトリでの Prefix c (新規ウィンドウ)
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 1.9" | bc) -eq 1 ]' \
    'bind -n C-t new-window -c "#{pane_current_path}"'
# C-q k で kill-window (default: Prefix &)
bind k confirm-before -p "kill-window #W? (y/n)" kill-window

# # C-q C-r でコピーした内容表示 (default: Prefix #)
# bind C-r list-buffers

# C-q C-t でtmux内のプログラムに C-t を送る.
bind C-t send-keys C-t


# マウス操作を有効にする (v2.1以降)  (*)
#（Macの場合、Optionを押しながらだと通常の範囲選択になる）
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
    'set-option -g mouse on'

# v2.1 でスクロール時に自動でコピーモードにならなくなっているのを解消
# (スクロールアップするとコピーモードに入る)
# (最後までスクロールダウンするとコピーモードを抜ける)
# https://github.com/tmux/tmux/issues/145#issuecomment-151123624
# https://bbs.archlinux.org/viewtopic.php?pid=1572476#p1572476
#bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
#bind -n WheelDownPane select-pane -t= \; send-keys -M
if-shell 'ver=$(tmux -V | cut -d" " -f2) && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
    'bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"select-pane -t=; copy-mode -e; send-keys -M\""'
if-shell 'ver=$(tmux -V | cut -d" " -f2) && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
    'bind -n WheelDownPane select-pane -t= \; send-keys -M'

# # set-option -g mouse on がエラーになるような旧バージョン(v2.1未満)の場合は以下を設定
# setw -g mode-mouse on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on
# set -g mouse-select-window on

# 256色端末を使用する (*)
set -g default-terminal "xterm-256color"

# xterm のファンクションキー シーケンスを使う
setw -g xterm-keys on

# ステータスバーの色を設定する
set -g status-fg white
#set -g status-bg black
set -g status-bg "colour235"

# # ウィンドウリストの色を設定する (v3 系からはオプションが削除)
# setw -g window-status-fg cyan
# setw -g window-status-bg default
# setw -g window-status-attr dim
# # アクティブなウィンドウを目立たせる
# setw -g window-status-current-fg white
# setw -g window-status-current-bg red
# setw -g window-status-current-attr bright

# アクティブなウィンドウを目立たせる
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
    "set -g window-style 'fg=colour247,bg=colour236'; \
     set -g window-active-style 'fg=colour250,bg=black'"

# window-status のフォーマットを指定する
# Prefix key が押されているかどうかを表示する
# http://qiita.com/dtan4/items/363e92525e7c5a16f3fc
setw -g window-status-format "#[default] #I: #W "
# if-shell 'ver=$(tmux -V | cut -d" " -f2) && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
#          'setw -g window-status-current-format "#[fg=colour255,bg=cyan,bold]#{?client_prefix,#[reverse],} #I: #W #[default]"' \
#          'setw -g window-status-current-format "#[fg=colour255,bg=cyan,bold] #I: #W #[default]"'

if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
         'setw -g window-status-current-format "#[fg=colour235,bg=colour31,bold]#[fg=colour255,bg=colour31,bold]#{?client_prefix,#[reverse],} #I: #W #[default]#[fg=colour31,bg=colour235]#[default]"' \
         'setw -g window-status-current-format "#[fg=colour255,bg=colour31,bold] #I: #W #[default]"'

# # ペインボーダーの色を設定する (*)  (v3 系からはオプションが削除)
# set -g pane-border-fg green
# set -g pane-border-bg black

# # アクティブなペインを目立たせる  (v3 系からはオプションが削除)
# set -g pane-active-border-fg white
# #set -g pane-active-border-bg yellow
# set -g pane-active-border-bg green

# # コマンドラインの色を設定する (*)  (v3 系からはオプションが削除)
# set -g message-fg white
# set -g message-bg black
# set -g message-attr bright

# # ステータスバーを設定する (#S:セッション番号, #I:ウィンドウ番号, #P:ペイン番号)
# ## 左パネルを設定する
# set -g status-left-length 40
# #set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
# #set -g status-left "#[fg=colour255,bg=colour237]#[fg=yellow]Session:#S #[fg=cyan]W:#I #[fg=green]P:#P #[default]"
#
# # Prefix key が押されているかどうかを表示する
# # http://qiita.com/dtan4/items/363e92525e7c5a16f3fc
# #set -g status-left '#[fg=cyan,bg=#303030]#{?client_prefix,#[reverse],} #H[#S] #[default]'
# #
# if-shell 'ver=$(tmux -V | cut -d" " -f2) && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
#     'set -g status-left "#[fg=colour255,bg=colour237]#[fg=yellow]#{?client_prefix,#[reverse],}Session:#S #[fg=cyan]W:#I #[fg=green]P:#P #[default]"' \
#     'set -g status-left "#[fg=colour255,bg=colour237]#[fg=yellow]Session:#S #[fg=cyan]W:#I #[fg=green]P:#P #[default]"'
#
# ## 右パネルを設定する
# #set -g status-right "#[fg=cyan][%Y-%m-%d(%a) %H:%M]"
# set -g status-right "#[fg=cyan,bg=colour237] [%Y-%m-%d(%a) %H:%M] "
#
# ## リフレッシュの間隔を設定する(デフォルト 15秒) (*)
# set -g status-interval 60
#
# ## ウィンドウリストの位置を中心寄せにする (*)
# set -g status-justify centre

# tmux-powerline を使う
# -> https://github.com/erikw/tmux-powerline
# $ git clone https://github.com/erikw/tmux-powerline.git
set-option -g status on
#set-option -g status-interval 2
set-option -g status-interval 10
set-option -g status-justify "left"
set-option -g status-left-length 100
set-option -g status-right-length 120
set-option -g status-left "#(~/.tmux-powerline/powerline.sh left)"
set-option -g status-right "#(~/.tmux-powerline/powerline.sh right)"

# -> https://github.com/thewtex/tmux-mem-cpu-load
# $ brew install tmux-mem-cpu-load


## ステータスバーのUTF-8サポートを有効にする (tmux2.2以降では明示的なutf8の設定は不要)
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver != x"master" -a $(echo "$ver < 2.2" | bc) -eq 1 ]' \
    'set -g status-utf8 on'

# ## ヴィジュアルノーティフィケーションを有効にする (*)
# setw -g monitor-activity on
# set -g visual-activity on

## ステータスバーを上部に表示する
# set -g status-position top

# コピーモードを設定する
## クリップボード共有を有効にする
#set-option -g default-command "exec reattach-to-user-namespace -l $SHELL"
if-shell 'which reattach-to-user-namespace' \
    'set -g default-command "reattach-to-user-namespace -l $SHELL"'

# ## Emacs のキーバインドを使用する
# setw -g mode-keys emacs
## viのキーバインドを使用する
setw -g mode-keys vi

# コピー後も copy-mode を維持 (default: copy-selection-and-cancel)
bind-key -T copy-mode M-w send-keys -X copy-selection
bind-key -T copy-mode-vi Enter send-keys -X copy-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi y send-keys V Left Enter

# ウィンドウを閉じた時、ウインドウ番号を採番し直す
if-shell 'ver=$(tmux -V | cut -d" " -f2 | sed -e "s/[A-Za-z]//") && [ x$ver = x"master" -o $(echo "$ver >= 2.1" | bc) -eq 1 ]' \
    'set -g renumber-windows on'

# history size
set -g history-limit 10000
