" https://vifm.info/manual.shtml
"
" vim: filetype=vifm :
" Sample configuration file for vifm on OSX (last updated: 28 June, 2016)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=vim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.

set novimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Use KiB, MiB, ... instead of KB, MB, ...

set noiec

" Selected color scheme

colorscheme Default

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems

set slowfs=curlftpfs

" Set custom status line look

set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

" mark b ~/bin/
" mark h ~/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" Spaces in an app name will have to be escaped e.g. QuickTime\ Player.app
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype *.pdf
        \ {Open in Preview}
        \ open -a Preview.app,
        \ {Open in Skim}
        \ open -a Skim.app,
fileviewer *.pdf pdftotext -nopgbrk %c -

" PostScript
filextype *.ps,*.eps open -a Preview.app

" Djvu
filextype *.djvu open -a MacDjView.app

" Audio
filextype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
        \ {Play using MPlayerX}
        \ open -a MPlayerX.app,
        \ {Open in iTunes}
        \ open -a iTunes.app,
        \ {Open in QuickTime Player}
        \ open -a QuickTime\ Player.app,
fileviewer *.mp3 mp3info
fileviewer *.flac soxi

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
"         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {Open in VLC}
        \ open -a VLC.app,
        \ {Open in QuickTime Player}
        \ open -a QuickTime\ Player.app,
        \ {Open in MPlayerX}
        \ open -a MPlayerX.app,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
"          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
         \ ffprobe -pretty %c 2>&1

" " Web
" filextype *.html,*.htm
"         \ {Open in Safari}
"         \ open -a Safari.app,
"         \ {Open in Firefox}
"         \ open -a Firefox.app,
"         \ {Open in Chrome}
"         \ open -a Google\ Chrome.app,
"         \ {Open in vim}
"         \ vim,
" fileviewer *.html,*.htm w3m -dump -T text/html

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Image
"filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,
"        \ open -a Preview.app,

filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,
"        \ convert -resize x150\> %f - | imgcat && read && clear,
        \ tmux split-window -v "convert -resize x500\> %f - | imgcat && read"

fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
         \ convert -identify %f -verbose /dev/null

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" " Torrent
" filextype *.torrent open -a Transmission.app
" fileviewer *.torrent dumptorrent -v %c

" " Extract zip files
" filetype *.zip unzip %f
" fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c

" " Extract tar archives
" filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -xf %f
" fileviewer *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -tf %f

" " Extract .bz2 archives
" filetype *.bz2 bzip2 -d %f

" " Extract .gz files
" filetype *.gz gunzip %f

" Mount .dmg archives
filetype *.dmg open

" Mount disk .img
filetype *.img open

" Open .pkg binaries
filetype *.pkg open

" " Office files
" filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt open -a LibreOffice.app
" fileviewer *.doc antiword -
" fileviewer *.docx, docx2txt.pl %f -

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For OS X:
" filetype * open

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" windo set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" windo filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" " Sample mappings

" " Start shell in current directory
" nnoremap s :shell<cr>

" " Display sorting dialog
" nnoremap S :sort<cr>

" " Toggle visibility of preview window
" nnoremap w :view<cr>
" vnoremap w :view<cr>gv

" " Open file in new MacVim tab
" nnoremap o :!mvim --remote-tab-silent %f<cr>
" " Open file in new MacVim window
" nnoremap O :!mvim %f<cr>

" " Open file in the background using its default program
" nnoremap gb :!open -g %f<cr>

" " Yank current directory path into the clipboard
" nnoremap yd :!printf %d | pbcopy<cr>

" " Yank current file path into the clipboard
" nnoremap yf :!printf %c:p | pbcopy<cr>

" " View preview in Quick Look
" nnoremap q :!qlmanage -p %f > /dev/null 2>&1<cr>

" " Mappings for faster renaming
" nnoremap I cw<c-a>
" nnoremap cc cw<c-u>
" nnoremap A cw

" " Open editor to edit vifmrc and apply settings after returning to vifm
" nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" " Open MacVim to edit vifmrc
" nnoremap ,C :!mvim --remote-tab-silent $MYVIFMRC &<cr>

" " Toggle wrap setting on ,w key
" nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg=ag\ --line-numbers\ %i\ %a\ %s

" Add additional place to look for executables
"
" let $PATH=$HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>


" ================================

set vicmd='less -N'

set timefmt=" %Y/%m/%d %H:%M:%S"

set statusline="  %t  [%T]%= %A %10u:%-7g %15s %20d [%a free]"
"set statusline="  %t  [%T]%= %A %15s %20d [%a free]"

"set wordchars="1-8,14-31,33-255"
" remove dot (`.') = 46
set wordchars="1-8,14-31,33-45,47-255"

" sort by name (including extension, ignores case)
set sort=+iname

if executable('ag')
  set grepprg=ag\ --line-numbers\ %i\ %a\ %s
endif

set viewcolumns=-45%{name}..,-{ext},10{size},12{perms},21{mtime}

set sizefmt=units:iec,precision:3

" https://stackoverflow.com/questions/33306228/how-to-browse-zip-files-in-vifm
" https://osxfuse.github.io/
" http://brewformulas.org/FuseZip
filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR

" https://github.com/vifm/vifm/issues/69
" $ brew install sshfs
" $ echo username@some.server:/home/username > someserver.ssh
filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR

" https://wiki.vifm.info/index.php?title=How_to_browse_FTP_in_Vifm
" $ brew install curlftpfs
filetype *.ftp FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %CLEAR,

" $ echo "-i afp://USER@SERVER/dir" > someserver.afp
filetype *.afp FUSE_MOUNT2|mount_afp %PARAM %DESTINATION_DIR

" https://wiki.vifm.info/index.php/How_to_preview_images
" https://github.com/vifm/vifm/issues/299
"
" `imgcat` -> https://www.iterm2.com/documentation-images.html
" $ wget https://raw.githubusercontent.com/gnachman/iTerm2/master/tests/imgcat
" or if using tmux, -> https://qiita.com/kiritex/items/786dbed4b7a2a22cbb89
" $ wget https://gist.githubusercontent.com/krtx/533d33d6cc49ecbbb8fab0ae871059ec/raw/b109cf4ce521a3ced0cce0da22f6d0365bc1b822/imgcat


" == Custom Commands

command! em emacsclient -nw -a "" %a
command! emacsclient emacsclient -nw -a "" %f
command! emacspane tmux split-window -v "emacsclient -nw -a '' %f"
command! lesspane tmux split-window -v "less -N %f"
command! shellpane tmux split-window -v "sh -c 'cd %d; exec "${SHELL:-sh}"'"
command! idea idea %f
command! code code %f
command! ediff emacsclient -nw -a "" --eval "(ediff-files \"%f\" \"%F\")"
command! coteditor open -a CotEditor %f
command! preview open -g -a Preview %f
command! tig tig -- %d
command! tigf tig -- %f
command! rsync            rsync -ahv --progress --exclude=".git" --exclude="node_modules" %d/ %D
command! rsyncignoreexist rsync -ahv --progress --exclude=".git" --exclude="node_modules" --ignore-existing %d/ %D
command! rsynccurrent     rsync -ahv --progress --exclude="node_modules" %f/ %D/%f
command! rsyncn           rsync -ahv --dry-run  --exclude="node_modules" %d/ %D
command! rsyncdel         rsync -ahv --progress --delete --backup --backup-dir=".del" --exclude="node_modules" %d/ %D
command! hlink ln %f %D/
command! vim vim %f
"command! ffmpeg -i %f -b:a 192k -ar 44100 %D/%c:r.mp3
command! ffmpeg for i in %f; do ffmpeg -i $i -b:a 192k -ar 44100 %D/${i%%.*}.mp3; done

" == Key Mapping

" " Add `;' to `:'
" nmap ; :

" " `a '
nnoremap a4 :!sips --out %D/%c:r_s.%c:e %f --resampleWidth 400<cr>
nnoremap a6 :!sips --out %D/%c:r_s.%c:e %f --resampleWidth 600<cr>
nnoremap a0 :!sips --out %D/%c:r_s.%c:e %f --resampleWidth<space>
nnoremap as :!pngpaste<space>.png<c-b><c-b><c-b><c-b>
nnoremap am :ffmpeg<cr>

" `b' to vimdiff
nnoremap b :diff<cr>

" " `b' to compare. (= ":compare bycontents listall ofboth grouppaths")
" nnoremap b :compare<cr>

" `B' to ediff
nnoremap B :ediff<cr>

" <m-b> to compare by bysize with unique file only
" -> https://vifm.info/vimdoc.shtml#vifm-compare-views
nnoremap <m-b> :compare bysize listunique ofboth grouppaths<cr>

" `C' to copy to other pane
nnoremap C :copy

" <m-c> to rsync under current cursor
nnoremap <m-c> :rsynccurrent

" `e' key is defined as an editor command prefix, but opens with view mode forcely in some seconds if the next key is not typed...
" Therefore use `E' key to see the following keys.

" `ee' to edit with Emacs
if executable('emacsclient')
  nnoremap ee :emacsclient<cr>
  nnoremap Ee :emacsclient<cr>
else
  nnoremap ee :edit<cr>
  nnoremap Ee :edit<cr>
endif

" `ea' to create file with Emacs
if executable('emacsclient')
  nnoremap ea :em<space>
  nnoremap Ea :em<space>
else
  nnoremap Ea :edit<space>
endif

" `ew' to edit with vim
nnoremap ew :vim<cr>
nnoremap Ew :vim<cr>

" `en' to create file with vim
nnoremap en :vim<space>
nnoremap En :vim<space>

" `ec' to edit VS Code
if executable('code')
  nnoremap ec :code<cr>
  nnoremap Ec :code<cr>
endif

" `eo' to edit with CotEditor
if executable('/Applications/CotEditor.app/Contents/MacOS/CotEditor')
  nnoremap eo :coteditor<cr>
  nnoremap Eo :coteditor<cr>
endif

" `ei' to edit with IntelliJ IDEA
if executable('idea')
  nnoremap ei :idea<cr>
  nnoremap Ei :idea<cr>
endif

" `ep' to edit with Emacs in the other pane
if executable('emacsclient')
  nnoremap ep :emacspane<cr>
  nnoremap Ep :emacspane<cr>
endif


" 'gr' to run grep using `grepprog'
nnoremap gr :grep<space>

" `H' to history
nnoremap H :history<cr>

" <m-h> to leave any view
nnoremap <m-h> gh<cr>

" I to tree view
nnoremap I :tree<cr>

" `i' to intern the directory in other pane
nnoremap i :sync %c<cr>

" `i' to view by less in other pane
" nnoremap i :lesspane<cr>

" " <m-i> to switch pane
" nnoremap <m-i> <tab>

" <m-i> to call tig
nnoremap <m-i> :tig<cr>

" <m-l> to call tig (for pointed file only)
nnoremap <m-l> :tigf<cr>

" `J' to go to boookmark
nnoremap J :bmarks<cr>

" <m-j> to page down
nnoremap <m-j> <c-d>

" `K' to make directory (`mkdir`)
"nnoremap K :mkcd<space>
nnoremap K :mkdir<space>

" <m-k> to pageup
nnoremap <m-k> <c-u>

" `L' to symlink by absolute path (default: `a l')
nnoremap L :alink

" " <m-l> to symlink by relative path (default: `r l')
" nnoremap <m-l> :rlink

" `M' to move (`mv`)
nnoremap M :move

" o to switch pane
nnoremap o <tab>

" `q' to quit with current directory
nnoremap q :quit<cr>

" `Q' to quit without current directory
nnoremap Q :cquit<cr>

" `R' to rename (using `wordchars' settings removed ascii 46 (dot))
nnoremap R cw<m-b><c-b>

" `r r' to rename (using `wordchars' settings removed ascii 46 (dot))
nnoremap rr cw<m-b><c-b>

" `r s' to rsync
nnoremap rs :rsync

" `r c' to rsync under cursor
nnoremap rc :rsynccurrent

" `r i' to rsync --ignore-existing
nnoremap ri :rsyncignoreexist

" `r n' to rsync --dry-run
nnoremap rn :rsyncn

" `r d' to rsync --delete
nnoremap rD :rsyncdel

" `r e' to show registers
nnoremap re :reg<cr>

" `S' to Display sorting dialog
nnoremap S :sort<cr>

" `ss' to invert sort order
nnoremap ss :invert o<cr>

" 'se' to select files for 1 month
" https://vifm.info/vimdoc.shtml#vifm-%3Aselect
nnoremap se :select !FROM=201901 TO=201902 && find . -type f -d 1 -newermt ${FROM}01 -not -newermt ${TO}01<c-a><m-f><m-f>

" T to lstrash
nnoremap T :lstrash<cr>

" `U' tu unpack
nnoremap U :!unzip %f -d %D

" `v' to `av' (always use visual mode with append scheme) (use <enter> key to save the region)
nnoremap v av

" " 'V' to open with Preview
" nnoremap V :preview<cr>

" `V' to Toggle visibility of preview window
nnoremap V :view<cr>
vnoremap V :view<cr>gv

" `W' to clone
nnoremap W :clone<cr>

" " `x' to shell
" nnoremap x :shell<cr>

" `x' to shell in other pane
nnoremap x :shellpane<cr>

" " 'x' to View preview in Quick Look
" nnoremap x :!qlmanage -p %f > /dev/null 2>&1 &<cr>

" " `x' to Open file in the background using its default program
" nnoremap x :!open -g %f<cr>

" `X' to Open file using its default program
nnoremap X :!open %f<cr>

" <m-x> to command
nnoremap <m-x> :!!  %f<m-b><c-b>

" `yb' to Yank current file base name into the clipboard
nnoremap yb :!printf %c:r | pbcopy<cr>

" `yc' to Yank current file name into the clipboard
nnoremap yc :!printf %c | pbcopy<cr>

" `yd' to Yank current directory path into the clipboard
nnoremap yd :!printf %d | pbcopy<cr>

" `yf' to Yank all selected file path into the clipboard
nnoremap yf :!printf "%f:p" | pbcopy<cr>

" `Z' to zip (default: ZZ or ZQ to exit like vim)
nnoremap Z :!zip -r %D/%c:r.zip %f

" `*' to select files by pattern
nnoremap * :select *.

" `-' to Yank current file path into the clipboard
nnoremap - :!printf %c:p | pbcopy<cr>

" `+' to add bookmark
nnoremap + :bmark<space>

" `<space>' to mark
nnoremap <space> t<down>

" `~' to go to home directory
nnoremap ~ :cd<cr>

" , to sync with cursor position
nnoremap , :sync!<cr>

" . toggle dotfiles (default: repeat last command-line command)
nnoremap . za

" == Add Ctrl key bindings

" `Ctrl-h' to cd up
nnoremap <bs> :cd ..<cr>

" `Ctrl-b' to cd up
nnoremap <c-b> :cd ..<cr>

" `Ctrl-f' to enter
nnoremap <c-f> <cr>

" `Ctrl-j' to open and down
nnoremap <c-j> lj

" `Ctrl-o' to history
nnoremap <c-o> :history<cr>

" `Ctrl-s' to search
nnoremap <c-s> /
mmap <c-s> /

" `Ctrl-a' to invert selection (default: "increment first number in file name by [count]")
"nnoremap <c-a> :invert s<cr>

" `Ctrl-a' to select only file (default: "increment first number in file name by [count]")
nnoremap <c-a> :select! */ | invert s<cr>

" `Ctrl-g' to cancel
map <c-g> <c-c>
cmap <c-g> <c-c>
mmap <c-g> <c-c>
nmap <c-g> <c-c>
vmap <c-g> <c-c>
qmap <c-g> <c-c>

" `m-g' to original Ctrl-g
nnoremap <m-g> <c-g>

" == Mark
" :mark mark /full/directory/path [filename]
mark g ~/Git
mark l ~/Downloads
mark t ~/Desktop
mark w ~/workspaces
mark v /Volumes
