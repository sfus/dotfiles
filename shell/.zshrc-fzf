## -> https://github.com/junegunn/fzf
# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
# ~/.fzf/install

# $ `brew --prefix`/opt/fzf/install
#   -> "~/.fzf.zsh" will be created.
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

source <(fzf --zsh)

# Re-assign fzf-file-widget (C-t), as C-t has been bound in my tmux.conf
bindkey '\e/' fzf-file-widget

export FZF_COMPLETION_TRIGGER='['

# Set FZF_DEFAULT_OPTS
# export FZF_DEFAULT_OPTS='--height 40% --reverse --border --info=inline'
# -> https://qiita.com/sho-t/items/dca82d5e27b16da12318
typeset -Tgx FZF_DEFAULT_OPTS fzf_default_opts " "
fzf_default_opts=(
  '--height=40%'
  '--reverse'
  '--border'
  '--inline-info'
#  '--prompt="âžœ  "'
  '--margin=0,2'
  '--tiebreak=index'
  '--no-mouse'
  '--filepath-word'
  '--ansi'
)

() {
  local -a fzf_bind_opts=()
  local -A bind_map=(
    [ctrl-i]='accept'
    [ctrl-space]='toggle+down'
    [ctrl-g]='cancel'
    [?]='toggle-preview'
    [ctrl-a]='toggle-all'
    ['ctrl-]']='replace-query'
    [ctrl-w]='backward-kill-word'
    [ctrl-x]='jump'
    [ctrl-z]='ignore'
    [up]='preview-page-up'
    [alt-v]='preview-page-up'
    [down]='preview-page-down'
    [ctrl-v]='preview-page-down'
  )

  for x in "${(k)bind_map[@]}"; do
    fzf_bind_opts+=("${x}:${bind_map[${x}]}")
  done
  fzf_default_opts+=( '--bind="'"${(j:,:)fzf_bind_opts}"'"' )
}

# Refs
# -> https://petitviolet.hatenablog.com/entry/20190708/1562544000

if type "rg" > /dev/null 2>&1; then
  fzf_tree_cmd='rg --files --hidden --follow --glob "!.git/*"'
  export FZF_DEFAULT_COMMAND="$fzf_tree_cmd"
  export FZF_CTRL_T_COMMAND="$fzf_tree_cmd"
fi
if type "bat" > /dev/null 2>&1; then
  fzf_preview_cmd='bat --color=always --style=header,grid --line-range :100 {}'
  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --preview \"$fzf_preview_cmd\""
  export FZF_CTRL_T_OPTS="--preview \"$fzf_preview_cmd\""
fi
export FZF_CTRL_R_OPTS="--no-preview"

# -> https://github.com/chitoku-k/fzf-zsh-completions
# zplug "chitoku-k/fzf-zsh-completions"
alias g='git'
function _fzf_complete_g () {
  _fzf_complete_git $@
}
alias d='docker'
function _fzf_complete_d () {
  _fzf_complete_docker $@
}
alias k='kubectl'
function _fzf_complete_k () {
  _fzf_complete_kubectl $@
}

# ZLE
# -> https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html
# -> https://dev.classmethod.jp/articles/zsh-zle-introduction/

# Argument insertion function to command-line
function fzf-insert() {
  local result="$*"
  if [ -n "$result" ]; then
    if [ -n "$LBUFFER" ]; then
      local cmd="${LBUFFER%\ } $result "
    else
      local cmd="$result "
    fi
    BUFFER=$cmd$RBUFFER
    CURSOR=$#cmd
  fi
  zle redisplay
}

# Ctrl-o: move to recently visited directory (requires `autoload -Uz cdr`)
function fzf-cdr () {
  local selected_dir=$(cdr -l | awk -v home="$HOME" '{ sub("^~", home, $2); print $2 }' | fzf --preview "CLICOLOR_FORCE=true ls -lG {}" --ansi)
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
  zle redisplay
}
zle -N fzf-cdr
bindkey '^o' fzf-cdr

# C-x k: kill process
function fzf-kill-process () {
  fzf-insert $(ps aux | fzf -e --no-preview | awk '{print "kill -9 " $2}')
}
zle -N fzf-kill-process
bindkey '^xk' fzf-kill-process

# Ctrl-]: move to ghq dirs
# -> https://qiita.com/tomoyamachi/items/e51d2906a5bb24cf1684
function fzf-ghq() {
  local src=$(ghq list | fzf --preview "ls -laTp $(ghq root)/{} | tail -n+4 | awk '{print \$9\"/\"\$6\"/\"\$7 \" \" \$10}'")
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle redisplay
}
zle -N fzf-ghq
bindkey '^]' fzf-ghq
